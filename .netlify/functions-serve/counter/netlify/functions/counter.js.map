{
  "version": 3,
  "sources": ["../../../../../../Users/thomash/Documents/GitHub/ula-yamanote.tokyo/netlify/functions/counter.ts", "../../../../../../Users/thomash/Documents/GitHub/ula-yamanote.tokyo/node_modules/@netlify/blobs/dist/chunk-GUEW34CP.js", "../../../../../../Users/thomash/Documents/GitHub/ula-yamanote.tokyo/node_modules/@netlify/blobs/dist/main.js"],
  "sourceRoot": "/var/folders/nk/48zb93yj5kj0rwrdg4t3qsj40000gn/T/tmp-34983-0n2INN7KT7XM",
  "sourcesContent": ["import { Handler } from '@netlify/functions';\nimport { getStore } from '@netlify/blobs';\n\n// Return zeros in development mode\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nconst COUNTER_KEY = 'visits';\nconst ACTIVE_USERS_KEY = 'active_users';\nconst ACTIVE_USER_TIMEOUT = 5 * 60 * 1000; // 5 minutes\n\ninterface UserTimestamp {\n  timestamp: number;\n}\n\nexport const handler: Handler = async (event) => {\n  if (isDevelopment) {\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        visits: 0,\n        activeUsers: 0\n      })\n    };\n  }\n\n  try {\n    const store = getStore('counter');\n    \n    // Get current counts\n    const visitsStr = await store.get(COUNTER_KEY) || '0';\n    const visits = parseInt(visitsStr);\n    \n    // Get and clean active users\n    const activeUsersStr = await store.get(ACTIVE_USERS_KEY) || '{}';\n    const activeUsers: Record<string, UserTimestamp> = JSON.parse(activeUsersStr);\n    \n    const now = Date.now();\n    // Clean up inactive users\n    Object.keys(activeUsers).forEach(id => {\n      if (now - activeUsers[id].timestamp > ACTIVE_USER_TIMEOUT) {\n        delete activeUsers[id];\n      }\n    });\n    \n    // Update current user's timestamp\n    const userId = event.headers['client-id'] || 'anonymous';\n    activeUsers[userId] = { timestamp: now };\n    \n    // Save updated counts\n    await store.set(COUNTER_KEY, (visits + 1).toString());\n    await store.set(ACTIVE_USERS_KEY, JSON.stringify(activeUsers));\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        visits: visits + 1,\n        activeUsers: Object.keys(activeUsers).length\n      })\n    };\n  } catch (error) {\n    console.error('Counter error:', error);\n    // On any error, also return zeros\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        visits: 0,\n        activeUsers: 0\n      })\n    };\n  }\n};\n", "// src/headers.ts\nvar NF_ERROR = \"x-nf-error\";\nvar NF_REQUEST_ID = \"x-nf-request-id\";\n\n// src/util.ts\nvar BlobsInternalError = class extends Error {\n  constructor(res) {\n    let details = res.headers.get(NF_ERROR) || `${res.status} status code`;\n    if (res.headers.has(NF_REQUEST_ID)) {\n      details += `, ID: ${res.headers.get(NF_REQUEST_ID)}`;\n    }\n    super(`Netlify Blobs has generated an internal error (${details})`);\n    this.name = \"BlobsInternalError\";\n  }\n};\nvar collectIterator = async (iterator) => {\n  const result = [];\n  for await (const item of iterator) {\n    result.push(item);\n  }\n  return result;\n};\nvar isNodeError = (error) => error instanceof Error;\nvar base64Decode = (input) => {\n  const { Buffer } = globalThis;\n  if (Buffer) {\n    return Buffer.from(input, \"base64\").toString();\n  }\n  return atob(input);\n};\nvar base64Encode = (input) => {\n  const { Buffer } = globalThis;\n  if (Buffer) {\n    return Buffer.from(input).toString(\"base64\");\n  }\n  return btoa(input);\n};\n\n// src/environment.ts\nvar getEnvironment = () => {\n  const { Deno, Netlify, process } = globalThis;\n  return Netlify?.env ?? Deno?.env ?? {\n    delete: (key) => delete process?.env[key],\n    get: (key) => process?.env[key],\n    has: (key) => Boolean(process?.env[key]),\n    set: (key, value) => {\n      if (process?.env) {\n        process.env[key] = value;\n      }\n    },\n    toObject: () => process?.env ?? {}\n  };\n};\nvar getEnvironmentContext = () => {\n  const context = globalThis.netlifyBlobsContext || getEnvironment().get(\"NETLIFY_BLOBS_CONTEXT\");\n  if (typeof context !== \"string\" || !context) {\n    return {};\n  }\n  const data = base64Decode(context);\n  try {\n    return JSON.parse(data);\n  } catch {\n  }\n  return {};\n};\nvar setEnvironmentContext = (context) => {\n  const encodedContext = base64Encode(JSON.stringify(context));\n  getEnvironment().set(\"NETLIFY_BLOBS_CONTEXT\", encodedContext);\n};\nvar MissingBlobsEnvironmentError = class extends Error {\n  constructor(requiredProperties) {\n    super(\n      `The environment has not been configured to use Netlify Blobs. To use it manually, supply the following properties when creating a store: ${requiredProperties.join(\n        \", \"\n      )}`\n    );\n    this.name = \"MissingBlobsEnvironmentError\";\n  }\n};\n\n// src/metadata.ts\nvar BASE64_PREFIX = \"b64;\";\nvar METADATA_HEADER_INTERNAL = \"x-amz-meta-user\";\nvar METADATA_HEADER_EXTERNAL = \"netlify-blobs-metadata\";\nvar METADATA_MAX_SIZE = 2 * 1024;\nvar encodeMetadata = (metadata) => {\n  if (!metadata) {\n    return null;\n  }\n  const encodedObject = base64Encode(JSON.stringify(metadata));\n  const payload = `b64;${encodedObject}`;\n  if (METADATA_HEADER_EXTERNAL.length + payload.length > METADATA_MAX_SIZE) {\n    throw new Error(\"Metadata object exceeds the maximum size\");\n  }\n  return payload;\n};\nvar decodeMetadata = (header) => {\n  if (!header || !header.startsWith(BASE64_PREFIX)) {\n    return {};\n  }\n  const encodedData = header.slice(BASE64_PREFIX.length);\n  const decodedData = base64Decode(encodedData);\n  const metadata = JSON.parse(decodedData);\n  return metadata;\n};\nvar getMetadataFromResponse = (response) => {\n  if (!response.headers) {\n    return {};\n  }\n  const value = response.headers.get(METADATA_HEADER_EXTERNAL) || response.headers.get(METADATA_HEADER_INTERNAL);\n  try {\n    return decodeMetadata(value);\n  } catch {\n    throw new Error(\n      \"An internal error occurred while trying to retrieve the metadata for an entry. Please try updating to the latest version of the Netlify Blobs client.\"\n    );\n  }\n};\n\n// src/consistency.ts\nvar BlobsConsistencyError = class extends Error {\n  constructor() {\n    super(\n      `Netlify Blobs has failed to perform a read using strong consistency because the environment has not been configured with a 'uncachedEdgeURL' property`\n    );\n    this.name = \"BlobsConsistencyError\";\n  }\n};\n\n// src/region.ts\nvar REGION_AUTO = \"auto\";\nvar regions = {\n  \"us-east-1\": true,\n  \"us-east-2\": true\n};\nvar isValidRegion = (input) => Object.keys(regions).includes(input);\nvar InvalidBlobsRegionError = class extends Error {\n  constructor(region) {\n    super(\n      `${region} is not a supported Netlify Blobs region. Supported values are: ${Object.keys(regions).join(\", \")}.`\n    );\n    this.name = \"InvalidBlobsRegionError\";\n  }\n};\n\n// src/retry.ts\nvar DEFAULT_RETRY_DELAY = getEnvironment().get(\"NODE_ENV\") === \"test\" ? 1 : 5e3;\nvar MIN_RETRY_DELAY = 1e3;\nvar MAX_RETRY = 5;\nvar RATE_LIMIT_HEADER = \"X-RateLimit-Reset\";\nvar fetchAndRetry = async (fetch, url, options, attemptsLeft = MAX_RETRY) => {\n  try {\n    const res = await fetch(url, options);\n    if (attemptsLeft > 0 && (res.status === 429 || res.status >= 500)) {\n      const delay = getDelay(res.headers.get(RATE_LIMIT_HEADER));\n      await sleep(delay);\n      return fetchAndRetry(fetch, url, options, attemptsLeft - 1);\n    }\n    return res;\n  } catch (error) {\n    if (attemptsLeft === 0) {\n      throw error;\n    }\n    const delay = getDelay();\n    await sleep(delay);\n    return fetchAndRetry(fetch, url, options, attemptsLeft - 1);\n  }\n};\nvar getDelay = (rateLimitReset) => {\n  if (!rateLimitReset) {\n    return DEFAULT_RETRY_DELAY;\n  }\n  return Math.max(Number(rateLimitReset) * 1e3 - Date.now(), MIN_RETRY_DELAY);\n};\nvar sleep = (ms) => new Promise((resolve) => {\n  setTimeout(resolve, ms);\n});\n\n// src/client.ts\nvar SIGNED_URL_ACCEPT_HEADER = \"application/json;type=signed-url\";\nvar Client = class {\n  constructor({ apiURL, consistency, edgeURL, fetch, region, siteID, token, uncachedEdgeURL }) {\n    this.apiURL = apiURL;\n    this.consistency = consistency ?? \"eventual\";\n    this.edgeURL = edgeURL;\n    this.fetch = fetch ?? globalThis.fetch;\n    this.region = region;\n    this.siteID = siteID;\n    this.token = token;\n    this.uncachedEdgeURL = uncachedEdgeURL;\n    if (!this.fetch) {\n      throw new Error(\n        \"Netlify Blobs could not find a `fetch` client in the global scope. You can either update your runtime to a version that includes `fetch` (like Node.js 18.0.0 or above), or you can supply your own implementation using the `fetch` property.\"\n      );\n    }\n  }\n  async getFinalRequest({\n    consistency: opConsistency,\n    key,\n    metadata,\n    method,\n    parameters = {},\n    storeName\n  }) {\n    const encodedMetadata = encodeMetadata(metadata);\n    const consistency = opConsistency ?? this.consistency;\n    let urlPath = `/${this.siteID}`;\n    if (storeName) {\n      urlPath += `/${storeName}`;\n    }\n    if (key) {\n      urlPath += `/${key}`;\n    }\n    if (this.edgeURL) {\n      if (consistency === \"strong\" && !this.uncachedEdgeURL) {\n        throw new BlobsConsistencyError();\n      }\n      const headers = {\n        authorization: `Bearer ${this.token}`\n      };\n      if (encodedMetadata) {\n        headers[METADATA_HEADER_INTERNAL] = encodedMetadata;\n      }\n      if (this.region) {\n        urlPath = `/region:${this.region}${urlPath}`;\n      }\n      const url2 = new URL(urlPath, consistency === \"strong\" ? this.uncachedEdgeURL : this.edgeURL);\n      for (const key2 in parameters) {\n        url2.searchParams.set(key2, parameters[key2]);\n      }\n      return {\n        headers,\n        url: url2.toString()\n      };\n    }\n    const apiHeaders = { authorization: `Bearer ${this.token}` };\n    const url = new URL(`/api/v1/blobs${urlPath}`, this.apiURL ?? \"https://api.netlify.com\");\n    for (const key2 in parameters) {\n      url.searchParams.set(key2, parameters[key2]);\n    }\n    if (this.region) {\n      url.searchParams.set(\"region\", this.region);\n    }\n    if (storeName === void 0 || key === void 0) {\n      return {\n        headers: apiHeaders,\n        url: url.toString()\n      };\n    }\n    if (encodedMetadata) {\n      apiHeaders[METADATA_HEADER_EXTERNAL] = encodedMetadata;\n    }\n    if (method === \"head\" /* HEAD */ || method === \"delete\" /* DELETE */) {\n      return {\n        headers: apiHeaders,\n        url: url.toString()\n      };\n    }\n    const res = await this.fetch(url.toString(), {\n      headers: { ...apiHeaders, accept: SIGNED_URL_ACCEPT_HEADER },\n      method\n    });\n    if (res.status !== 200) {\n      throw new BlobsInternalError(res);\n    }\n    const { url: signedURL } = await res.json();\n    const userHeaders = encodedMetadata ? { [METADATA_HEADER_INTERNAL]: encodedMetadata } : void 0;\n    return {\n      headers: userHeaders,\n      url: signedURL\n    };\n  }\n  async makeRequest({\n    body,\n    consistency,\n    headers: extraHeaders,\n    key,\n    metadata,\n    method,\n    parameters,\n    storeName\n  }) {\n    const { headers: baseHeaders = {}, url } = await this.getFinalRequest({\n      consistency,\n      key,\n      metadata,\n      method,\n      parameters,\n      storeName\n    });\n    const headers = {\n      ...baseHeaders,\n      ...extraHeaders\n    };\n    if (method === \"put\" /* PUT */) {\n      headers[\"cache-control\"] = \"max-age=0, stale-while-revalidate=60\";\n    }\n    const options = {\n      body,\n      headers,\n      method\n    };\n    if (body instanceof ReadableStream) {\n      options.duplex = \"half\";\n    }\n    return fetchAndRetry(this.fetch, url, options);\n  }\n};\nvar getClientOptions = (options, contextOverride) => {\n  const context = contextOverride ?? getEnvironmentContext();\n  const siteID = context.siteID ?? options.siteID;\n  const token = context.token ?? options.token;\n  if (!siteID || !token) {\n    throw new MissingBlobsEnvironmentError([\"siteID\", \"token\"]);\n  }\n  if (options.region !== void 0 && !isValidRegion(options.region)) {\n    throw new InvalidBlobsRegionError(options.region);\n  }\n  const clientOptions = {\n    apiURL: context.apiURL ?? options.apiURL,\n    consistency: options.consistency,\n    edgeURL: context.edgeURL ?? options.edgeURL,\n    fetch: options.fetch,\n    region: options.region,\n    siteID,\n    token,\n    uncachedEdgeURL: context.uncachedEdgeURL ?? options.uncachedEdgeURL\n  };\n  return clientOptions;\n};\n\nexport {\n  BlobsInternalError,\n  collectIterator,\n  isNodeError,\n  base64Decode,\n  getEnvironmentContext,\n  setEnvironmentContext,\n  MissingBlobsEnvironmentError,\n  METADATA_HEADER_INTERNAL,\n  encodeMetadata,\n  decodeMetadata,\n  getMetadataFromResponse,\n  REGION_AUTO,\n  SIGNED_URL_ACCEPT_HEADER,\n  Client,\n  getClientOptions\n};\n", "import {\n  BlobsInternalError,\n  Client,\n  MissingBlobsEnvironmentError,\n  REGION_AUTO,\n  base64Decode,\n  collectIterator,\n  getClientOptions,\n  getEnvironmentContext,\n  getMetadataFromResponse,\n  setEnvironmentContext\n} from \"./chunk-GUEW34CP.js\";\n\n// src/lambda_compat.ts\nvar connectLambda = (event) => {\n  const rawData = base64Decode(event.blobs);\n  const data = JSON.parse(rawData);\n  const environmentContext = {\n    deployID: event.headers[\"x-nf-deploy-id\"],\n    edgeURL: data.url,\n    siteID: event.headers[\"x-nf-site-id\"],\n    token: data.token\n  };\n  setEnvironmentContext(environmentContext);\n};\n\n// src/store.ts\nvar DEPLOY_STORE_PREFIX = \"deploy:\";\nvar LEGACY_STORE_INTERNAL_PREFIX = \"netlify-internal/legacy-namespace/\";\nvar SITE_STORE_PREFIX = \"site:\";\nvar Store = class _Store {\n  constructor(options) {\n    this.client = options.client;\n    if (\"deployID\" in options) {\n      _Store.validateDeployID(options.deployID);\n      let name = DEPLOY_STORE_PREFIX + options.deployID;\n      if (options.name) {\n        name += `:${options.name}`;\n      }\n      this.name = name;\n    } else if (options.name.startsWith(LEGACY_STORE_INTERNAL_PREFIX)) {\n      const storeName = options.name.slice(LEGACY_STORE_INTERNAL_PREFIX.length);\n      _Store.validateStoreName(storeName);\n      this.name = storeName;\n    } else {\n      _Store.validateStoreName(options.name);\n      this.name = SITE_STORE_PREFIX + options.name;\n    }\n  }\n  async delete(key) {\n    const res = await this.client.makeRequest({ key, method: \"delete\" /* DELETE */, storeName: this.name });\n    if (![200, 204, 404].includes(res.status)) {\n      throw new BlobsInternalError(res);\n    }\n  }\n  async get(key, options) {\n    const { consistency, type } = options ?? {};\n    const res = await this.client.makeRequest({ consistency, key, method: \"get\" /* GET */, storeName: this.name });\n    if (res.status === 404) {\n      return null;\n    }\n    if (res.status !== 200) {\n      throw new BlobsInternalError(res);\n    }\n    if (type === void 0 || type === \"text\") {\n      return res.text();\n    }\n    if (type === \"arrayBuffer\") {\n      return res.arrayBuffer();\n    }\n    if (type === \"blob\") {\n      return res.blob();\n    }\n    if (type === \"json\") {\n      return res.json();\n    }\n    if (type === \"stream\") {\n      return res.body;\n    }\n    throw new BlobsInternalError(res);\n  }\n  async getMetadata(key, { consistency } = {}) {\n    const res = await this.client.makeRequest({ consistency, key, method: \"head\" /* HEAD */, storeName: this.name });\n    if (res.status === 404) {\n      return null;\n    }\n    if (res.status !== 200 && res.status !== 304) {\n      throw new BlobsInternalError(res);\n    }\n    const etag = res?.headers.get(\"etag\") ?? void 0;\n    const metadata = getMetadataFromResponse(res);\n    const result = {\n      etag,\n      metadata\n    };\n    return result;\n  }\n  async getWithMetadata(key, options) {\n    const { consistency, etag: requestETag, type } = options ?? {};\n    const headers = requestETag ? { \"if-none-match\": requestETag } : void 0;\n    const res = await this.client.makeRequest({\n      consistency,\n      headers,\n      key,\n      method: \"get\" /* GET */,\n      storeName: this.name\n    });\n    if (res.status === 404) {\n      return null;\n    }\n    if (res.status !== 200 && res.status !== 304) {\n      throw new BlobsInternalError(res);\n    }\n    const responseETag = res?.headers.get(\"etag\") ?? void 0;\n    const metadata = getMetadataFromResponse(res);\n    const result = {\n      etag: responseETag,\n      metadata\n    };\n    if (res.status === 304 && requestETag) {\n      return { data: null, ...result };\n    }\n    if (type === void 0 || type === \"text\") {\n      return { data: await res.text(), ...result };\n    }\n    if (type === \"arrayBuffer\") {\n      return { data: await res.arrayBuffer(), ...result };\n    }\n    if (type === \"blob\") {\n      return { data: await res.blob(), ...result };\n    }\n    if (type === \"json\") {\n      return { data: await res.json(), ...result };\n    }\n    if (type === \"stream\") {\n      return { data: res.body, ...result };\n    }\n    throw new Error(`Invalid 'type' property: ${type}. Expected: arrayBuffer, blob, json, stream, or text.`);\n  }\n  list(options = {}) {\n    const iterator = this.getListIterator(options);\n    if (options.paginate) {\n      return iterator;\n    }\n    return collectIterator(iterator).then(\n      (items) => items.reduce(\n        (acc, item) => ({\n          blobs: [...acc.blobs, ...item.blobs],\n          directories: [...acc.directories, ...item.directories]\n        }),\n        { blobs: [], directories: [] }\n      )\n    );\n  }\n  async set(key, data, { metadata } = {}) {\n    _Store.validateKey(key);\n    const res = await this.client.makeRequest({\n      body: data,\n      key,\n      metadata,\n      method: \"put\" /* PUT */,\n      storeName: this.name\n    });\n    if (res.status !== 200) {\n      throw new BlobsInternalError(res);\n    }\n  }\n  async setJSON(key, data, { metadata } = {}) {\n    _Store.validateKey(key);\n    const payload = JSON.stringify(data);\n    const headers = {\n      \"content-type\": \"application/json\"\n    };\n    const res = await this.client.makeRequest({\n      body: payload,\n      headers,\n      key,\n      metadata,\n      method: \"put\" /* PUT */,\n      storeName: this.name\n    });\n    if (res.status !== 200) {\n      throw new BlobsInternalError(res);\n    }\n  }\n  static formatListResultBlob(result) {\n    if (!result.key) {\n      return null;\n    }\n    return {\n      etag: result.etag,\n      key: result.key\n    };\n  }\n  static validateKey(key) {\n    if (key === \"\") {\n      throw new Error(\"Blob key must not be empty.\");\n    }\n    if (key.startsWith(\"/\") || key.startsWith(\"%2F\")) {\n      throw new Error(\"Blob key must not start with forward slash (/).\");\n    }\n    if (new TextEncoder().encode(key).length > 600) {\n      throw new Error(\n        \"Blob key must be a sequence of Unicode characters whose UTF-8 encoding is at most 600 bytes long.\"\n      );\n    }\n  }\n  static validateDeployID(deployID) {\n    if (!/^\\w{1,24}$/.test(deployID)) {\n      throw new Error(`'${deployID}' is not a valid Netlify deploy ID.`);\n    }\n  }\n  static validateStoreName(name) {\n    if (name.includes(\"/\") || name.includes(\"%2F\")) {\n      throw new Error(\"Store name must not contain forward slashes (/).\");\n    }\n    if (new TextEncoder().encode(name).length > 64) {\n      throw new Error(\n        \"Store name must be a sequence of Unicode characters whose UTF-8 encoding is at most 64 bytes long.\"\n      );\n    }\n  }\n  getListIterator(options) {\n    const { client, name: storeName } = this;\n    const parameters = {};\n    if (options?.prefix) {\n      parameters.prefix = options.prefix;\n    }\n    if (options?.directories) {\n      parameters.directories = \"true\";\n    }\n    return {\n      [Symbol.asyncIterator]() {\n        let currentCursor = null;\n        let done = false;\n        return {\n          async next() {\n            if (done) {\n              return { done: true, value: void 0 };\n            }\n            const nextParameters = { ...parameters };\n            if (currentCursor !== null) {\n              nextParameters.cursor = currentCursor;\n            }\n            const res = await client.makeRequest({\n              method: \"get\" /* GET */,\n              parameters: nextParameters,\n              storeName\n            });\n            let blobs = [];\n            let directories = [];\n            if (![200, 204, 404].includes(res.status)) {\n              throw new BlobsInternalError(res);\n            }\n            if (res.status === 404) {\n              done = true;\n            } else {\n              const page = await res.json();\n              if (page.next_cursor) {\n                currentCursor = page.next_cursor;\n              } else {\n                done = true;\n              }\n              blobs = (page.blobs ?? []).map(_Store.formatListResultBlob).filter(Boolean);\n              directories = page.directories ?? [];\n            }\n            return {\n              done: false,\n              value: {\n                blobs,\n                directories\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n};\n\n// src/store_factory.ts\nvar getDeployStore = (input = {}) => {\n  const context = getEnvironmentContext();\n  const options = typeof input === \"string\" ? { name: input } : input;\n  const deployID = options.deployID ?? context.deployID;\n  if (!deployID) {\n    throw new MissingBlobsEnvironmentError([\"deployID\"]);\n  }\n  const clientOptions = getClientOptions(options, context);\n  if (!clientOptions.region) {\n    if (clientOptions.edgeURL || clientOptions.uncachedEdgeURL) {\n      if (!context.primaryRegion) {\n        throw new Error(\n          \"When accessing a deploy store, the Netlify Blobs client needs to be configured with a region, and one was not found in the environment. To manually set the region, set the `region` property in the `getDeployStore` options. If you are using the Netlify CLI, you may have an outdated version; run `npm install -g netlify-cli@latest` to update and try again.\"\n        );\n      }\n      clientOptions.region = context.primaryRegion;\n    } else {\n      clientOptions.region = REGION_AUTO;\n    }\n  }\n  const client = new Client(clientOptions);\n  return new Store({ client, deployID, name: options.name });\n};\nvar getStore = (input) => {\n  if (typeof input === \"string\") {\n    const clientOptions = getClientOptions({});\n    const client = new Client(clientOptions);\n    return new Store({ client, name: input });\n  }\n  if (typeof input?.name === \"string\") {\n    const { name } = input;\n    const clientOptions = getClientOptions(input);\n    if (!name) {\n      throw new MissingBlobsEnvironmentError([\"name\"]);\n    }\n    const client = new Client(clientOptions);\n    return new Store({ client, name });\n  }\n  if (typeof input?.deployID === \"string\") {\n    const clientOptions = getClientOptions(input);\n    const { deployID } = input;\n    if (!deployID) {\n      throw new MissingBlobsEnvironmentError([\"deployID\"]);\n    }\n    const client = new Client(clientOptions);\n    return new Store({ client, deployID });\n  }\n  throw new Error(\n    \"The `getStore` method requires the name of the store as a string or as the `name` property of an options object\"\n  );\n};\n\n// src/store_list.ts\nfunction listStores(options = {}) {\n  const context = getEnvironmentContext();\n  const clientOptions = getClientOptions(options, context);\n  const client = new Client(clientOptions);\n  const iterator = getListIterator(client, SITE_STORE_PREFIX);\n  if (options.paginate) {\n    return iterator;\n  }\n  return collectIterator(iterator).then((results) => ({ stores: results.flatMap((page) => page.stores) }));\n}\nvar formatListStoreResponse = (stores) => stores.filter((store) => !store.startsWith(DEPLOY_STORE_PREFIX)).map((store) => store.startsWith(SITE_STORE_PREFIX) ? store.slice(SITE_STORE_PREFIX.length) : store);\nvar getListIterator = (client, prefix) => {\n  const parameters = {\n    prefix\n  };\n  return {\n    [Symbol.asyncIterator]() {\n      let currentCursor = null;\n      let done = false;\n      return {\n        async next() {\n          if (done) {\n            return { done: true, value: void 0 };\n          }\n          const nextParameters = { ...parameters };\n          if (currentCursor !== null) {\n            nextParameters.cursor = currentCursor;\n          }\n          const res = await client.makeRequest({\n            method: \"get\" /* GET */,\n            parameters: nextParameters\n          });\n          if (res.status === 404) {\n            return { done: true, value: void 0 };\n          }\n          const page = await res.json();\n          if (page.next_cursor) {\n            currentCursor = page.next_cursor;\n          } else {\n            done = true;\n          }\n          return {\n            done: false,\n            value: {\n              ...page,\n              stores: formatListStoreResponse(page.stores)\n            }\n          };\n        }\n      };\n    }\n  };\n};\nexport {\n  connectLambda,\n  getDeployStore,\n  getStore,\n  listStores,\n  setEnvironmentContext\n};\n"],
  "mappings": "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",
  "names": ["Buffer", "process"]
}
